

void Config(char directory[100]="", char option[6]="myfun")
{
  static Int_t sseed = 1*100000;
 // static Int_t sseed = 0; // Set 0 to use the current time
  // static Int_t sseed = rand1; 

  //=====================================================================
  //  Libraries required by geant321
  gSystem->Load("liblhapdf.so");      // Parton density functions
  gSystem->Load("libpythia6.so");     // Pythia
  gSystem->Load("libgeant321.so");
  gSystem->Load("libEG");
  gSystem->Load("libEGPythia6");
  gSystem->Load("libAliPythia6.so");
  new TGeant3TGeo("C++ Interface to Geant3");
  //=======================================================================

  // commented out by lf
  //if(!AliCDBManager::Instance()->IsDefaultStorageSet()){
  //  AliCDBManager::Instance()->SetDefaultStorage("local:///dalice07/lopez/ALICE/AliRoot/TRUNK");
  //  AliCDBManager::Instance()->SetRun(0);
  //}

  // Set Random Number seed
  gRandom->SetSeed(sseed);

  //  Create the output file    
  Text_t filename[100];
  sprintf(filename,"%sgalice.root",directory);

  AliRunLoader* rl=0x0;
  rl = AliRunLoader::Open(
	filename, AliConfig::GetDefaultEventFolderName(), "recreate");
  if (rl == 0x0) {
    gAlice->Fatal("Config.C","Can not instatiate the Run Loader");
    return;
  }
  rl->SetCompressionLevel(2);
  rl->SetNumberOfEventsPerFile(1000);
  gAlice->SetRunLoader(rl);

  //=======================================================================
  // Set the trigger configuration - not needed for MUON in stand-alone mode
  // gAlice->SetTriggerDescriptor("p-p");
  // cout<<"Trigger configuration is set to  p-p"<<endl;

  //=======================================================================
  // Set External decayer
  TVirtualMCDecayer *decayer = new AliDecayerPythia();
  decayer->SetForceDecay(kAll);
  decayer->Init();
  gMC->SetExternalDecayer(decayer);

  //=======================================================================
  // ******* GEANT STEERING parameters FOR ALICE SIMULATION *******
    gMC->SetProcess("DCAY",1);
    gMC->SetProcess("PAIR",1);
    gMC->SetProcess("COMP",1);
    gMC->SetProcess("PHOT",1);
    gMC->SetProcess("PFIS",0);
    gMC->SetProcess("DRAY",0);
    gMC->SetProcess("ANNI",1);
    gMC->SetProcess("BREM",1);
    gMC->SetProcess("MUNU",1);
    gMC->SetProcess("CKOV",1);
    gMC->SetProcess("HADR",1);
    gMC->SetProcess("LOSS",2);
    gMC->SetProcess("MULS",1);
    gMC->SetProcess("RAYL",1);

    Float_t cut = 1.e-3;        // 1MeV cut by default
    Float_t tofmax = 1.e10;

    gMC->SetCut("CUTGAM", cut);
    gMC->SetCut("CUTELE", cut);
    gMC->SetCut("CUTNEU", cut);
    gMC->SetCut("CUTHAD", cut);
    gMC->SetCut("CUTMUO", cut);
    gMC->SetCut("BCUTE",  cut); 
    gMC->SetCut("BCUTM",  cut); 
    gMC->SetCut("DCUTE",  cut); 
    gMC->SetCut("DCUTM",  cut); 
    gMC->SetCut("PPCUTM", cut);
    gMC->SetCut("TOFMAX", tofmax); 
  //
  //=======================================================================
  // ************* STEERING parameters FOR ALICE SIMULATION **************
  // Chamber positions
  // From AliMUONConstants class we get :
  //   Position Z (along beam) of the chambers (in cm) 
  //        (from AliMUONConstants class):  
  //    533.5,  546.5,  678.5, 693.5,  964.0, 986.0, 1251.5, 1278.5, 
  //   1416.5, 1443.5,  1610, 1625.,  1710., 1725. 
  //   Internal Radius (in cm)   
  //     36.4,  46.2,  66.0,  80.,  80., 100., 100.    
  //   External Radius (in cm)
  //    183.,  245.,  395.,  560., 563., 850., 900.  
  //=======================================================================

             if (!strcmp(option,"myfun")) {
                      AliGenTHnSparse *gener = new AliGenTHnSparse();
                      gener->SetNumberParticles(10);                
                      gener->SetPart(13,kTRUE);
                      gener->SetThnSparse("@THNSPARSE_SRC@","Thn4MC");
                      gener->Init(); 
                  }

  //============================================================= 

  TGeoGlobalMagField::Instance()->SetField(new AliMagF("Maps","Maps", -1., -1, AliMagF::k5kG));

  Int_t iITS = 1;
  Int_t iFMD = 1;
  Int_t iVZERO = 1;
  Int_t iZDC = 0;
  Int_t iT0 = 0;

  rl->CdGAFile();

  //=================== Alice BODY parameters =============================
  AliBODY *BODY = new AliBODY("BODY","Alice envelop");
  //=================== ABSO parameters ============================
  AliABSO *ABSO = new AliABSOv3("ABSO", "Muon Absorber");
  //=================== DIPO parameters ============================
  AliDIPO *DIPO = new AliDIPOv3("DIPO", "Dipole version 2");
  //================== HALL parameters ============================
  AliHALL *HALL = new AliHALLv3("HALL", "Alice Hall");
  //================== The L3 Magnet ==============================
  AliMAG *MAG = new AliMAG("MAG", "L3 Magnet");
  //=================== PIPE parameters ============================
  AliPIPE *PIPE = new AliPIPEv3("PIPE", "Beam Pipe");
  //=================== SHIL parameters ============================
  AliSHIL *SHIL = new AliSHILv3("SHIL", "Shielding Version 2");
  //=================== ITS parameters =============================
  if(iITS) {
  AliITS *ITS  = new AliITSv11Hybrid("ITS","ITS v11Hybrid");
      }
  //=================== FMD parameters =============================
  if(iFMD) {
  AliFMD *FMD = new AliFMDv1("FMD", "normal FMD");
  }
  //=================== VZERO parameters =============================
  if (iVZERO) {
  AliVZERO *VZERO = new AliVZEROv7("VZERO", "normal VZERO");
  }
  if (iZDC){
  //=================== ZDC parameters ============================
  AliZDC *ZDC = new AliZDCv3("ZDC", "normal ZDC");
  }
  if (iT0)
  {
  //=================== T0 parameters ============================
  AliT0 *T0 = new AliT0v1("T0", "T0 Detector");
  }


  //=================== MUON Subsystem ===========================
  cout << ">>> Config.C: Creating AliMUONv1 ..."<<endl;

  AliMUON *MUON = new AliMUONv1("MUON","default");
  MUON->SetTriggerEffCells(1);  // ABSOLUTELY NEEDED [lf]

}

Float_t EtaToTheta(Float_t arg){
  return (180./TMath::Pi())*2.*atan(exp(-arg));
}
